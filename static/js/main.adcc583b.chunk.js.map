{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","appid","useState","weather","setWeather","city","setCity","iframesrc","setiframesrc","useEffect","axios","get","then","response","newWeather","data","catch","error","console","log","showPosition","position","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","descp","description","className","type","name","id","onChange","setInterval","document","getElementById","value","main","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gNA4FeA,MAzFf,WACE,IAAMC,EAAQ,mCACd,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAmDA,OAhDAC,qBAAU,WAWR,GAVY,MAARJ,GACFK,IAAMC,IAAN,4DAA+DN,EAA/D,kBAA6EJ,EAA7E,kBACGW,MAAK,SAAUC,GACd,IAAMC,EAAaD,EAASE,KAC5BX,EAAWU,MAEZE,OAAM,SAACC,GACNC,QAAQC,IAAI,iBAAkBF,MAG1B,MAANZ,EAAW,CAAC,IAQLe,EAAT,SAAsBC,GAEpBX,IAAMC,IAAN,8DAAiEU,EAASC,OAAOC,SAAjF,gBAAiGF,EAASC,OAAOE,UAAjH,kBAAoIvB,EAApI,kBACGW,MAAK,SAAUC,GACd,IAAMC,EAAaD,EAASE,KAC5BX,EAAWU,MAEZE,OAAM,SAACC,GACNC,QAAQC,IAAI,iBAAkBF,OAIpC,GAlBMQ,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBP,GAEzCF,QAAQC,IAAI,iDAeD,MAAXhB,EAAiB,CACnB,IAAIyB,EAAQzB,EAAQA,QAAQ,GAAG0B,YAK/B,GAJAX,QAAQC,IAAIhB,EAAQA,QAAQ,GAAG0B,aAClB,oBAATD,GAAwC,UAAVA,GAChCV,QAAQC,IAAI,WAED,SAATS,EAAkB,CACpBV,QAAQC,IAAI,WAEZX,EADmB,UAIvBU,QAAQC,IAAIZ,MAEb,CAACF,IAIF,qBAAKyB,UAAU,WAAf,SACE,gCACE,6CACA,uBACA,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,SAAU,WACjDC,aAAY,WACV7B,EAAQ8B,SAASC,eAAe,QAAQC,SACvC,QAGL,uBATF,IASS,uBACP,uBAVF,IAUS,uBACP,uBAXF,IAWS,uBAGQ,OAAZnC,EACC,qCACE,mCAAMA,EAAQ6B,KAAd,OACA,uBAAMF,UAAU,OAAhB,UAAwB3B,EAAQoC,KAAKC,KAArC,IAA2C,oCAA3C,QACA,mCAAMrC,EAAQA,QAAQ,GAAG0B,YAAzB,KAAuC,6BAIzC,iDAGJ,2DCzEOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFf,SAASC,eAAe,SAM1BI,M","file":"static/js/main.adcc583b.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const appid = '973497d219f1c7351022d3f0bbbb2724';\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState(null);\n  const [iframesrc, setiframesrc] = useState(null)\n\n  // getLocation()\n  useEffect(() => {\n    if (city != null) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${appid}&units=metric`)\n        .then(function (response) {\n          const newWeather = response.data\n          setWeather(newWeather)\n        })\n        .catch((error) => {\n          console.log('error occured ', error);\n        })\n    }\n    if (city==null){\n      function getLocation() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(showPosition);\n        } else {\n          console.log(\"Geolocation is not supported by this browser.\");\n        }\n      }\n      function showPosition(position) {\n        // console.log(`latitude = ${position.coords.latitude}`);\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${appid}&units=metric`)\n          .then(function (response) {\n            const newWeather = response.data\n            setWeather(newWeather)\n          })\n          .catch((error) => {\n            console.log('error occured ', error);\n          })\n      }\n      getLocation()\n      if (weather != null) {\n        var descp = weather.weather[0].description\n        console.log(weather.weather[0].description);\n        if (descp ==='overcast clouds' || descp === 'smoke') {\n          console.log('Raining');\n        }\n        if (descp != 'cloud') {\n          console.log(' ! rain');\n          var newiframeSrc = 'Hello'\n          setiframesrc(newiframeSrc)\n        }\n      }\n      console.log(iframesrc);\n    }\n  }, [city])\n\n\n  return (\n    <div className='app-main'>\n      <div>\n        <h1>Weather App</h1>\n        <br />\n        <input type=\"text\" name=\"city\" id=\"city\" onChange={() => {\n          setInterval(() => {\n            setCity(document.getElementById('city').value)\n          }, 1000);\n        }} />\n\n        <br /> <br />\n        <br /> <br />\n        <br /> <br />\n\n        {\n          (weather !== null) ?\n            <>\n              <h3> {weather.name} </h3>\n              <span className='temp'>{weather.main.temp} <sup>o</sup> C</span>\n              <h2> {weather.weather[0].description}  <br />\n              </h2>\n            </>\n            :\n            <h4>Weather Updates</h4>\n        }\n\n        <footer> &copy; QambarAli</footer>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}