{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","appid","useState","weather","setWeather","city","setCity","iframesrc","setiframesrc","useEffect","document","getElementById","value","axios","get","then","response","newWeather","data","descp","description","console","log","catch","error","className","type","name","id","onChange","setInterval","main","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gNA4FeA,MAzFf,WACE,IAAMC,EAAQ,mCACd,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAkCJ,mBAAS,MAA3C,mBAAOK,EAAP,KAAkBC,EAAlB,KAmDA,OAhDAC,qBAAU,WACR,GAA6C,IAAzCC,SAASC,eAAe,QAAQC,OAAuB,MAARP,GAqBvC,MAARA,GACFQ,IAAMC,IAAN,4DAA+DT,EAA/D,kBAA6EJ,EAA7E,kBACGc,MAAK,SAAUC,GACd,IAAMC,EAAaD,EAASE,KAE5B,GADAd,EAAWa,GACI,MAAXd,EAAiB,CACnB,IAAIgB,EAAQhB,EAAQA,QAAQ,GAAGiB,YAK/B,GAJAC,QAAQC,IAAInB,EAAQA,QAAQ,GAAGiB,aACjB,oBAAVD,GAAyC,UAAVA,GACjCE,QAAQC,IAAI,WAEA,UAAVH,EAAmB,CACrBE,QAAQC,IAAI,WAEZd,EADmB,SAGJ,MAAbD,GACFc,QAAQC,IAAIf,OAIjBgB,OAAM,SAACC,GACNH,QAAQC,IAAI,iBAAkBE,QAGnC,CAACnB,IAEF,qBAAKoB,UAAU,WAAf,SACE,gCACE,6CACA,uBACA,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,OAAOC,SAAU,WACjDC,aAAY,WACVxB,EAAQI,SAASC,eAAe,QAAQC,SACvC,QAGL,uBATF,IASS,uBACP,uBAVF,IAUS,uBACP,uBAXF,IAWS,uBAGQ,OAAZT,EACC,qCACE,mCAAMA,EAAQwB,KAAd,OACA,uBAAMF,UAAU,OAAhB,UAAwBtB,EAAQ4B,KAAKC,KAArC,IAA2C,oCAA3C,QACA,mCAAM7B,EAAQA,QAAQ,GAAGiB,YAAzB,KAAuC,6BAIzC,iDAGJ,2DCzEOa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpB,MAAK,YAAkD,IAA/CqB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFjC,SAASC,eAAe,SAM1BsB,M","file":"static/js/main.97d4ce28.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  const appid = '973497d219f1c7351022d3f0bbbb2724';\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState(null);\n  const [iframesrc, setiframesrc] = useState(null)\n\n  // getLocation()\n  useEffect(() => {\n    if (document.getElementById('city').value == '' || city == null) {\n      function getLocation() {\n        if (navigator.geolocation) {\n          navigator.geolocation.getCurrentPosition(showPosition);\n        } else {\n          console.log(\"Geolocation is not supported by this browser.\");\n        }\n      }\n      function showPosition(position) {\n        // console.log(`latitude = ${position.coords.latitude}`);\n        axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${appid}&units=metric`)\n          .then(function (response) {\n            const newWeather = response.data\n            setWeather(newWeather)\n          })\n          .catch((error) => {\n            console.log('error occured ', error);\n          })\n      }\n    }\n\n    if (city != null) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${appid}&units=metric`)\n        .then(function (response) {\n          const newWeather = response.data\n          setWeather(newWeather)\n          if (weather != null) {\n            var descp = weather.weather[0].description\n            console.log(weather.weather[0].description);\n            if (descp === 'overcast clouds' || descp === 'smoke') {\n              console.log('Raining');\n            }\n            if (descp !== 'cloud') {\n              console.log(' ! rain');\n              var newiframeSrc = 'Hello'\n              setiframesrc(newiframeSrc)\n            }\n            if (iframesrc != null) {\n              console.log(iframesrc);\n            }\n          }\n        })\n        .catch((error) => {\n          console.log('error occured ', error);\n        })\n    }\n  }, [city])\n  return (\n    <div className='app-main'>\n      <div>\n        <h1>Weather App</h1>\n        <br />\n        <input type=\"text\" name=\"city\" id=\"city\" onChange={() => {\n          setInterval(() => {\n            setCity(document.getElementById('city').value)\n          }, 1000);\n        }} />\n\n        <br /> <br />\n        <br /> <br />\n        <br /> <br />\n\n        {\n          (weather !== null) ?\n            <>\n              <h3> {weather.name} </h3>\n              <span className='temp'>{weather.main.temp} <sup>o</sup> C</span>\n              <h2> {weather.weather[0].description}  <br />\n              </h2>\n            </>\n            :\n            <h4>Weather Updates</h4>\n        }\n\n        <footer> &copy; QambarAli</footer>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}