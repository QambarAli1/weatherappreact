{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","localStorage","clear","appid","useState","weather","setWeather","city","setCity","showPosition","position","console","log","coords","latitude","longitude","setItem","navigator","geolocation","getCurrentPosition","useEffect","axios","get","then","response","newWeather","data","catch","error","lat","JSON","parse","getItem","long","className","type","name","id","onClick","document","getElementById","value","description","main","temp","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"gNAwFeA,MArFf,WACEC,aAAaC,QACb,IAAMC,EAAQ,mCACd,EAA8BC,mBAAS,MAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwBF,mBAAS,MAAjC,mBAAOG,EAAP,KAAaC,EAAb,KASA,SAASC,EAAaC,GACpBC,QAAQC,IACN,aAAeF,EAASG,OAAOC,SAC/B,kBAAoBJ,EAASG,OAAOE,WAEtCd,aAAae,QAAQ,MAAON,EAASG,OAAOC,UAC5Cb,aAAae,QAAQ,OAAQN,EAASG,OAAOE,WA+B/C,OA5CME,UAAUC,YACZD,UAAUC,YAAYC,mBAAmBV,GAEzCE,QAAQC,IAAI,iDAahBQ,qBAAU,WACR,GAAY,MAARb,EACFc,IAAMC,IAAN,4DAA+Df,EAA/D,kBAA6EJ,EAA7E,kBACGoB,MAAK,SAAUC,GACd,IAAMC,EAAaD,EAASE,KAC5BpB,EAAWmB,MAEZE,OAAM,SAACC,GACNjB,QAAQC,IAAI,iBAAkBgB,UAG/B,CACH,IAAIC,EAAMC,KAAKC,MAAM9B,aAAa+B,QAAQ,QACtCC,EAAOH,KAAKC,MAAM9B,aAAa+B,QAAQ,SAE3CX,IAAMC,IAAN,8DAAiEO,EAAjE,gBAA4EI,EAA5E,kBAA0F9B,EAA1F,kBACGoB,MAAK,SAAUC,GACd,IAAMC,EAAaD,EAASE,KAC5BpB,EAAWmB,MAEZE,OAAM,SAACC,GACNjB,QAAQC,IAAI,iBAAkBgB,SAInC,CAACrB,IAIF,qBAAK2B,UAAU,WAAf,SACE,gCACE,6CACA,uBACA,uBAAOC,KAAK,OAAOC,KAAK,OAAOC,GAAG,SAClC,wBACAC,QAAU,WACR9B,EAAQ+B,SAASC,eAAe,QAAQC,QAF1C,oBAMA,uBAVF,IAUS,uBACP,uBAXF,IAWS,uBACP,uBAZF,IAYS,uBAGQ,OAAZpC,EACC,qCACE,mCAAMA,EAAQ+B,KAAd,OACA,mCAAM/B,EAAQA,QAAQ,GAAGqC,YAAzB,KAAuC,uBACrC,uBAAMR,UAAU,OAAhB,UAAwB7B,EAAQsC,KAAKC,KAArC,IAA2C,oCAA3C,cAIJ,iDAGJ,2DCrEOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBxB,MAAK,YAAkD,IAA/CyB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhB,SAASC,eAAe,SAM1BK,M","file":"static/js/main.40f3ee4a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nfunction App() {\n  localStorage.clear()\n  const appid = '973497d219f1c7351022d3f0bbbb2724';\n  const [weather, setWeather] = useState(null);\n  const [city, setCity] = useState(null);\n  function getLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  function showPosition(position) {\n    console.log(\n      \"Latitude: \" + position.coords.latitude +\n      \"<br>Longitude: \" + position.coords.longitude\n    );\n    localStorage.setItem('lat', position.coords.latitude)\n    localStorage.setItem('long', position.coords.longitude)\n  }\n  getLocation()\n  useEffect(() => {\n    if (city != null) {\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${appid}&units=metric`)\n        .then(function (response) {\n          const newWeather = response.data\n          setWeather(newWeather)\n        })\n        .catch((error) => {\n          console.log('error occured ', error);\n        })\n    }\n    else {\n      var lat = JSON.parse(localStorage.getItem('lat'))\n      var long = JSON.parse(localStorage.getItem('long'))\n\n      axios.get(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&appid=${appid}&units=metric`)\n        .then(function (response) {\n          const newWeather = response.data\n          setWeather(newWeather)\n        })\n        .catch((error) => {\n          console.log('error occured ', error);\n        })\n    }\n\n  }, [city])\n\n\n  return (\n    <div className='app-main'>\n      <div>\n        <h1>Weather App</h1>\n        <br />\n        <input type=\"text\" name=\"city\" id=\"city\" />\n        <button\n        onClick= {()=>{\n          setCity(document.getElementById('city').value)\n        }}\n        >\n          Search</button>\n        <br /> <br />\n        <br /> <br />\n        <br /> <br />\n\n        {\n          (weather !== null) ?\n            <>\n              <h3> {weather.name} </h3>\n              <h2> {weather.weather[0].description}  <br />\n                <span className='temp'>{weather.main.temp} <sup>o</sup> C</span>\n              </h2>\n            </>\n            :\n            <h4>Weather Updates</h4>\n        }\n\n        <footer> &copy; QambarAli</footer>\n      </div>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}